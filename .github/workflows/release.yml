name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyside6 pyinstaller "numpy<2.0.0" scipy matplotlib

    - name: Install platform-specific dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get install -y libxcb-xinerama0

    - name: Build the application with PyInstaller (Linux)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onefile --windowed --name "LipsSync-Visualizer-Linux" main.py

    - name: Install platform-specific dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp
      
    - name: Build the application with PyInstaller (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --windowed --name "LipsSync-Visualizer-macOS" main.py
        
    - name: Build the application with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --name "LipsSync-Visualizer-Windows" main.py

    - name: Archive the build (Linux and Windows)
      if: runner.os == 'Linux' || runner.os == 'Windows'
      run: |
        mkdir release
        mv dist/* release/
    
    - name: Package the DiskImage & Archive the build (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir -p tmp/dmg
        mkdir -p release
        cp -R dist/*.app tmp/dmg/
        hdiutil create -volname "LipsSync-Visualizer-macOS" -srcfolder tmp/dmg -ov -format UDZO release/LipsSync-Visualizer-macOS.dmg

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ runner.os }}
        path: release/*

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download build artifacts from Windows
      uses: actions/download-artifact@v4
      with:
        name: build-Windows
        path: ./release/Windows

    - name: Download build artifacts from macOS
      uses: actions/download-artifact@v4
      with:
        name: build-macOS
        path: ./release/macOS

    - name: Download build artifacts from Linux
      uses: actions/download-artifact@v4
      with:
        name: build-Linux
        path: ./release/Linux

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/githubcli-archive-keyring.gpg > /dev/null
        sudo apt update
        sudo apt install gh

    - name: Add Build Date
      run: |
        VERSION=$(date +'%Y%m%d')
        mv ./release/Windows/LipsSync-Visualizer-Windows.exe ./release/Windows/LipsSync-Visualizer-Windows-${VERSION}.exe
        mv ./release/macOS/LipsSync-Visualizer-macOS.dmg ./release/macOS/LipsSync-Visualizer-macOS-${VERSION}.dmg
        mv ./release/Linux/LipsSync-Visualizer-Linux ./release/Linux/LipsSync-Visualizer-Linux-${VERSION}

    - name: Create and upload GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Initialize an empty array to hold the file paths
        files=()
  
        # Add all files from the Windows, macOS, and Linux directories to the array
        files+=($(find ./release/Windows -type f))
        files+=($(find ./release/macOS -type f))
        files+=($(find ./release/Linux -type f))

        # Print the files to be uploaded for debugging purposes
        echo "Files to be uploaded: ${files[@]}"
  
        VERSION=$(date +'%Y%m%d')
        
        # Ensure the Release exists first before uploading files
        gh release create "v${VERSION}-${{ github.run_number }}" --title "Release v${VERSION}-${{ github.run_number }}" --notes "Automated release generated by GitHub Actions."
  
        # Upload the files to GitHub Release
        gh release upload "v${VERSION}-${{ github.run_number }}" "${files[@]}" --clobber